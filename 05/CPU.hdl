// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction,b=Alout,sel=instruction[15],out=Ain);
    Mux(a=true,b=instruction[5],sel=instruction[15],out=Aload);
    ARegister(in=Ain,load=Aload,out=Mux2a,out[0..14]=addressM,out=PCin);
    Mux16(a=Mux2a,b=inM,sel=instruction[12],out=Alin);
    ALU(x=Dout,y=Alin,zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],out=outM,out=Din,out=Alout,zr=zr,ng=ng,zr=zr1,ng=ng1);
    And(a=zr,b=instruction[1],out=eq);
    And(a=ng,b=instruction[2],out=lt);
    Or(a=zr1,b=ng1,out=zrOrng);
    Not(in=zrOrng,out=zrNorng);
    And(a=zrNorng,b=instruction[0],out=gt);
    Or(a=eq,b=lt,out=jmp1);
    Or(a=gt,b=jmp1,out=jmp2);
    And(a=instruction[4],b=instruction[15],out=Dload);
    DRegister(in=Din,load=Dload,out=Dout);
    And(a=instruction[15],b=jmp2,out=jmp);
    PC(in=PCin,reset=reset,load=jmp,inc=true,out[0..14]=pc);
    And(a=instruction[3],b=instruction[15],out=writeM);
    // Put your code here:
}
